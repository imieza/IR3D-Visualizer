from PySide import QtGui
import sys
import matplotlib.pyplot as plt
import numpy as np
from scipy.io import wavfile
from scipy import signal
import math

from plotWidget import PlotWidget
from dataProcessing import DataProcessing

class Cheacker():
    def __init__(self):

        self.dataProcceser = DataProcessing()
        self.test()
        plt.show()

    def ploter(self,data, fs, peaks=None):
        """Graficador
         :param data: Matriz (4x4: w,x,y,z)
         :param fs: Frecuencia de sampleo
         :param title: lista de 4 strings
         """
        plt.figure()
        n_window_frames = self.dataProcceser.time_window * fs / 1000

        time = np.arange(0.0, float(len(data.tolist()[0])) / fs, 1.0 / fs)
        for channel in range(len(data)):
            plt.subplot(len(data) * 100 + 11 + channel)
            if peaks is not None:
                window_of_ds = range(peaks[0]-n_window_frames/2, peaks[0]+n_window_frames/2, 1)
                plt.plot(time, data.tolist()[channel], "b-",
                         time[peaks[1:]], data[:, peaks[1:]].tolist()[channel], "g*",
                         time[window_of_ds], data[:, window_of_ds].tolist()[channel], "r")
            else:
                plt.plot(time, data.tolist()[channel])

    def ploter3d(self, i_db, az_el_windows):
        from mpl_toolkits.mplot3d import Axes3D
        fig = plt.figure()
        ax = plt.subplot(111, projection='3d')
        fig.set_dpi(80)

        [x, y, z] = self.sph2cart(az_el_windows[0], az_el_windows[1], i_db)
        colors_of_red = 20
        color = iter(plt.cm.Spectral(np.linspace(0.2, 1, len(x) + colors_of_red)))
        for i in range(1, len(x)):
            c = next(color)
            ax.plot([0, x[i]], [0, y[i]], [0, z[i]], marker="_", c=c, linewidth=1.5)
        ax.plot([0, x[0]], [0, y[0]], [0, z[0]], marker="_", c='r', linewidth=5.0)
        self.axisEqual3D(ax)

    def axisEqual3D(self, ax):
        extents = np.array([getattr(ax, 'get_{}lim'.format(dim))() for dim in 'xyz'])
        sz = extents[:, 1] - extents[:, 0]
        centers = np.mean(extents, axis=1)
        maxsize = max(abs(sz))
        r = maxsize / 2
        for ctr, dim in zip(centers, 'xyz'):
            getattr(ax, 'set_{}lim'.format(dim))(ctr - r, ctr + r)

    def sph2cart(self, azimuth, elevation, r):
        x = r * np.cos(elevation) * np.cos(azimuth)
        y = r * np.cos(elevation) * np.sin(azimuth)
        z = r * np.sin(elevation)
        return x, y, z

    def process(self):
        [self.audio, self.fs] = self.dataProcceser.load_wavefile("Audios de prueba/stpatricks_s2r2.wav")
        self.audio_filtered = self.dataProcceser.low_filtering(self.audio, self.fs)
        self.audio_filtered_norm = self.dataProcceser.normalizer(np.array(self.audio_filtered[0,:])[0])
        self.intensity = self.dataProcceser.pressure_to_intensity(self.audio_filtered)
        [self.intensity_windows, self.az_el_windows, self.i_db] = self.dataProcceser.temporal_windowing(self.intensity, self.fs)
        self.index_of_peaks = self.dataProcceser.window_selector(self.i_db, self.fs)
        self.normalizado = self.dataProcceser.normalizer(self.i_db[0, self.index_of_peaks])
        self.az_el_windows = self.az_el_windows[:, self.index_of_peaks]

    def test(self):
        self.process()
        self.ploter(np.matrix(self.audio_filtered_norm), self.fs, self.index_of_peaks)
        self.ploter3d(self.normalizado, self.az_el_windows)

Cheacker()
